# space O(n)
# top-down
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        if triangle == []:
            return 0
        
        dp = [0] * len(triangle[-1])
        
        dp[0] = triangle[0][0]
        
        sum_upper = 1
        
        for i in range(1,len(triangle)):
            cp = dp[:]
            for j in range(len(triangle[i])):
                if j==0:
                    dp[j] = cp[j] + triangle[i][j]
                elif j== len(triangle[i])-1:
                    dp[j] = cp[j-1] + triangle[i][j]
                else:
                    dp[j] = triangle[i][j] + min(cp[j],cp[j-1])
        print dp
        return min(dp)
                
        
